/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    posts: Post;
    media: Media;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    'theme-config': ThemeConfig;
  };
  globalsSelect: {
    'theme-config': ThemeConfigSelect<false> | ThemeConfigSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "theme-config".
 */
export interface ThemeConfig {
  id: number;
  primary50?: string | null;
  primary100?: string | null;
  primary200?: string | null;
  primary300?: string | null;
  primary400?: string | null;
  primary500?: string | null;
  primary600?: string | null;
  primary700?: string | null;
  primary800?: string | null;
  primary900?: string | null;
  primary950?: string | null;
  secondary50?: string | null;
  secondary100?: string | null;
  secondary200?: string | null;
  secondary300?: string | null;
  secondary400?: string | null;
  secondary500?: string | null;
  secondary600?: string | null;
  secondary700?: string | null;
  secondary800?: string | null;
  secondary900?: string | null;
  secondary950?: string | null;
  colorPrimary?: string | null;
  textOnPrimary?: string | null;
  colorSecondary?: string | null;
  textOnSecondary?: string | null;
  cardBackground?: string | null;
  textOnCard?: string | null;
  pageBackground?: string | null;
  textOnPage?: string | null;
  /**
   * Main background color (HSL format: h s% l%)
   */
  background: string;
  /**
   * Main text color (HSL format: h s% l%)
   */
  foreground: string;
  /**
   * Primary brand color (HSL format: h s% l%)
   */
  basePrimary: string;
  /**
   * Text color for primary backgrounds
   */
  basePrimaryForeground?: string | null;
  /**
   * Secondary brand color (HSL format: h s% l%)
   */
  baseSecondary?: string | null;
  /**
   * Text color for secondary backgrounds
   */
  baseSecondaryForeground?: string | null;
  /**
   * Accent color for highlights (HSL format: h s% l%)
   */
  accent?: string | null;
  /**
   * Text color for accent backgrounds
   */
  accentForeground?: string | null;
  /**
   * Default border color (HSL format: h s% l%)
   */
  border?: string | null;
  /**
   * Input field background color
   */
  input?: string | null;
  /**
   * Border radius value (e.g., 0.5rem, 8px)
   */
  radius?: string | null;
  /**
   * Body background color (HSL format: h s% l%)
   */
  colorBodyBg?: string | null;
  /**
   * Surface/container background color
   */
  colorSurface?: string | null;
  /**
   * Card background color
   */
  additionalCardBg?: string | null;
  /**
   * Alternate section background color
   */
  colorSectionAlt?: string | null;
  /**
   * Body text color
   */
  colorTextBody?: string | null;
  /**
   * Heading text color
   */
  colorTextHeading?: string | null;
  /**
   * Muted text color
   */
  colorTextMuted?: string | null;
  /**
   * Inverse text color (for dark backgrounds)
   */
  colorTextInverse?: string | null;
  /**
   * Link text color
   */
  colorTextLink?: string | null;
  /**
   * Muted border color (HSL format: h s% l%)
   */
  colorBorderMuted?: string | null;
  typography?: {
    /**
     * Font family for body text
     */
    fontBody?:
      | (
          | 'asimon-hebrew'
          | 'frank-ruhl-libre'
          | 'noto-sans-hebrew'
          | 'noto-serif-hebrew'
          | 'noto-rashi-hebrew'
          | 'heebo'
          | 'rubik'
          | 'assistant'
          | 'secular-one'
          | 'suez-one'
          | 'alef'
          | 'miriam-libre'
          | 'inter'
          | 'manrope'
          | 'dm-sans'
          | 'nunito'
          | 'epilogue'
          | 'mulish'
          | 'lexend'
          | 'public-sans'
          | 'jost'
          | 'sora'
          | 'poppins'
        )
      | null;
    /**
     * Font family for headings
     */
    fontHeading?:
      | (
          | 'asimon-hebrew'
          | 'frank-ruhl-libre'
          | 'noto-sans-hebrew'
          | 'noto-serif-hebrew'
          | 'noto-rashi-hebrew'
          | 'heebo'
          | 'rubik'
          | 'assistant'
          | 'secular-one'
          | 'suez-one'
          | 'alef'
          | 'miriam-libre'
          | 'inter'
          | 'manrope'
          | 'dm-sans'
          | 'nunito'
          | 'epilogue'
          | 'mulish'
          | 'lexend'
          | 'public-sans'
          | 'jost'
          | 'sora'
          | 'poppins'
        )
      | null;
    /**
     * Font family for monospace text (code)
     */
    fontMono?: ('fira-code' | 'jetbrains-mono' | 'source-code-pro' | 'ibm-plex-mono' | 'roboto-mono') | null;
    /**
     * Extra small text size
     */
    textXs?: string | null;
    /**
     * Small text size
     */
    textSm?: string | null;
    /**
     * Base text size
     */
    textBase?: string | null;
    /**
     * Large text size
     */
    textLg?: string | null;
    /**
     * Extra large text size
     */
    textXl?: string | null;
    /**
     * 2X large text size
     */
    text2xl?: string | null;
    /**
     * 3X large text size
     */
    text3xl?: string | null;
    /**
     * 4X large text size
     */
    text4xl?: string | null;
    direction?: ('auto' | 'ltr' | 'rtl') | null;
  };
  spacing?: {
    /**
     * Extra small spacing
     */
    spacingXs?: string | null;
    /**
     * Small spacing
     */
    spacingSm?: string | null;
    /**
     * Medium spacing
     */
    spacingMd?: string | null;
    /**
     * Large spacing
     */
    spacingLg?: string | null;
    /**
     * Extra large spacing
     */
    spacingXl?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "theme-config_select".
 */
export interface ThemeConfigSelect<T extends boolean = true> {
  primary50?: T;
  primary100?: T;
  primary200?: T;
  primary300?: T;
  primary400?: T;
  primary500?: T;
  primary600?: T;
  primary700?: T;
  primary800?: T;
  primary900?: T;
  primary950?: T;
  secondary50?: T;
  secondary100?: T;
  secondary200?: T;
  secondary300?: T;
  secondary400?: T;
  secondary500?: T;
  secondary600?: T;
  secondary700?: T;
  secondary800?: T;
  secondary900?: T;
  secondary950?: T;
  colorPrimary?: T;
  textOnPrimary?: T;
  colorSecondary?: T;
  textOnSecondary?: T;
  cardBackground?: T;
  textOnCard?: T;
  pageBackground?: T;
  textOnPage?: T;
  background?: T;
  foreground?: T;
  basePrimary?: T;
  basePrimaryForeground?: T;
  baseSecondary?: T;
  baseSecondaryForeground?: T;
  accent?: T;
  accentForeground?: T;
  border?: T;
  input?: T;
  radius?: T;
  colorBodyBg?: T;
  colorSurface?: T;
  additionalCardBg?: T;
  colorSectionAlt?: T;
  colorTextBody?: T;
  colorTextHeading?: T;
  colorTextMuted?: T;
  colorTextInverse?: T;
  colorTextLink?: T;
  colorBorderMuted?: T;
  typography?:
    | T
    | {
        fontBody?: T;
        fontHeading?: T;
        fontMono?: T;
        textXs?: T;
        textSm?: T;
        textBase?: T;
        textLg?: T;
        textXl?: T;
        text2xl?: T;
        text3xl?: T;
        text4xl?: T;
        direction?: T;
      };
  spacing?:
    | T
    | {
        spacingXs?: T;
        spacingSm?: T;
        spacingMd?: T;
        spacingLg?: T;
        spacingXl?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}