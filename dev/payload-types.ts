/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    posts: Post;
    media: Media;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    'theme-config': ThemeConfig;
  };
  globalsSelect: {
    'theme-config': ThemeConfigSelect<false> | ThemeConfigSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "theme-config".
 */
export interface ThemeConfig {
  id: number;
  colorPrimary?: string | null;
  textOnPrimary?: string | null;
  colorSecondary?: string | null;
  textOnSecondary?: string | null;
  cardBackground?: string | null;
  textOnCard?: string | null;
  pageBackground?: string | null;
  textOnPage?: string | null;
  typography: {
    /**
     * Font family for body text
     */
    fontBody:
      | 'alef'
      | 'almoni-tzar-bold'
      | 'asimon-hebrew'
      | 'assistant'
      | 'frank-ruhl-libre'
      | 'heebo'
      | 'miriam-libre'
      | 'noto-rashi-hebrew'
      | 'noto-sans-hebrew'
      | 'noto-serif-hebrew'
      | 'ploni-regular'
      | 'rubik'
      | 'secular-one'
      | 'suez-one'
      | 'dm-sans'
      | 'epilogue'
      | 'inter'
      | 'jost'
      | 'lexend'
      | 'manrope'
      | 'mulish'
      | 'nunito'
      | 'poppins'
      | 'public-sans'
      | 'sora';
    /**
     * Font family for headings
     */
    fontHeading:
      | 'alef'
      | 'almoni-tzar-bold'
      | 'asimon-hebrew'
      | 'assistant'
      | 'frank-ruhl-libre'
      | 'heebo'
      | 'miriam-libre'
      | 'noto-rashi-hebrew'
      | 'noto-sans-hebrew'
      | 'noto-serif-hebrew'
      | 'ploni-regular'
      | 'rubik'
      | 'secular-one'
      | 'suez-one'
      | 'dm-sans'
      | 'epilogue'
      | 'inter'
      | 'jost'
      | 'lexend'
      | 'manrope'
      | 'mulish'
      | 'nunito'
      | 'poppins'
      | 'public-sans'
      | 'sora';
    direction: 'auto' | 'ltr' | 'rtl';
    h1: {
      fontSize: {
        largeDesktop: string;
        desktop: string;
        tablet: string;
        mobile: string;
      };
      lineHeight: {
        largeDesktop: string;
        desktop: string;
        tablet: string;
        mobile: string;
      };
    };
    h2: {
      fontSize: {
        largeDesktop: string;
        desktop: string;
        tablet: string;
        mobile: string;
      };
      lineHeight: {
        largeDesktop: string;
        desktop: string;
        tablet: string;
        mobile: string;
      };
    };
    h3: {
      fontSize: {
        largeDesktop: string;
        desktop: string;
        tablet: string;
        mobile: string;
      };
      lineHeight: {
        largeDesktop: string;
        desktop: string;
        tablet: string;
        mobile: string;
      };
    };
    h4: {
      fontSize: {
        largeDesktop: string;
        desktop: string;
        tablet: string;
        mobile: string;
      };
      lineHeight: {
        largeDesktop: string;
        desktop: string;
        tablet: string;
        mobile: string;
      };
    };
    p: {
      fontSize: {
        largeDesktop: string;
        desktop: string;
        tablet: string;
        mobile: string;
      };
      lineHeight: {
        largeDesktop: string;
        desktop: string;
        tablet: string;
        mobile: string;
      };
    };
    /**
     * Blockquote typography settings
     */
    blockquote: {
      /**
       * Font size for blockquotes
       */
      fontSize: string;
      /**
       * Line height for blockquotes
       */
      lineHeight: string;
    };
    /**
     * Muted text typography settings
     */
    muted: {
      /**
       * Font size for muted text
       */
      fontSize: string;
      /**
       * Line height for muted text
       */
      lineHeight: string;
    };
    /**
     * Table typography settings
     */
    table: {
      /**
       * Font size for tables
       */
      fontSize: string;
      /**
       * Line height for tables
       */
      lineHeight: string;
    };
    /**
     * List typography settings
     */
    list: {
      /**
       * Font size for lists
       */
      fontSize: string;
      /**
       * Line height for lists
       */
      lineHeight: string;
    };
    /**
     * Inline code typography settings
     */
    inlineCode: {
      /**
       * Font size for inline code
       */
      fontSize: string;
      /**
       * Line height for inline code
       */
      lineHeight: string;
    };
    /**
     * Lead paragraph typography settings
     */
    lead: {
      /**
       * Font size for lead paragraphs
       */
      fontSize: string;
      /**
       * Line height for lead paragraphs
       */
      lineHeight: string;
    };
    /**
     * Large text typography settings
     */
    large: {
      /**
       * Font size for large text
       */
      fontSize: string;
      /**
       * Line height for large text
       */
      lineHeight: string;
    };
    /**
     * Small text typography settings
     */
    small: {
      /**
       * Font size for small text
       */
      fontSize: string;
      /**
       * Line height for small text
       */
      lineHeight: string;
    };
  };
  layout: {
    /**
     * Set the max-width for the main container. (e.g., 1360)
     */
    maxWidth: number;
    breakpoints: {
      mobile: number;
      tablet: number;
      desktop: number;
      largeDesktop: number;
    };
    spacingScale: {
      xs: string;
      sm: string;
      md: string;
      lg: string;
      xl: string;
    };
    borderRadius: {
      /**
       * Border radius for boxes (e.g., 0.5rem)
       */
      box: string;
      /**
       * Border radius for buttons (e.g., 9999px for pill shape)
       */
      button: string;
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "theme-config_select".
 */
export interface ThemeConfigSelect<T extends boolean = true> {
  colorPrimary?: T;
  textOnPrimary?: T;
  colorSecondary?: T;
  textOnSecondary?: T;
  cardBackground?: T;
  textOnCard?: T;
  pageBackground?: T;
  textOnPage?: T;
  typography?:
    | T
    | {
        fontBody?: T;
        fontHeading?: T;
        direction?: T;
        h1?:
          | T
          | {
              fontSize?:
                | T
                | {
                    largeDesktop?: T;
                    desktop?: T;
                    tablet?: T;
                    mobile?: T;
                  };
              lineHeight?:
                | T
                | {
                    largeDesktop?: T;
                    desktop?: T;
                    tablet?: T;
                    mobile?: T;
                  };
            };
        h2?:
          | T
          | {
              fontSize?:
                | T
                | {
                    largeDesktop?: T;
                    desktop?: T;
                    tablet?: T;
                    mobile?: T;
                  };
              lineHeight?:
                | T
                | {
                    largeDesktop?: T;
                    desktop?: T;
                    tablet?: T;
                    mobile?: T;
                  };
            };
        h3?:
          | T
          | {
              fontSize?:
                | T
                | {
                    largeDesktop?: T;
                    desktop?: T;
                    tablet?: T;
                    mobile?: T;
                  };
              lineHeight?:
                | T
                | {
                    largeDesktop?: T;
                    desktop?: T;
                    tablet?: T;
                    mobile?: T;
                  };
            };
        h4?:
          | T
          | {
              fontSize?:
                | T
                | {
                    largeDesktop?: T;
                    desktop?: T;
                    tablet?: T;
                    mobile?: T;
                  };
              lineHeight?:
                | T
                | {
                    largeDesktop?: T;
                    desktop?: T;
                    tablet?: T;
                    mobile?: T;
                  };
            };
        p?:
          | T
          | {
              fontSize?:
                | T
                | {
                    largeDesktop?: T;
                    desktop?: T;
                    tablet?: T;
                    mobile?: T;
                  };
              lineHeight?:
                | T
                | {
                    largeDesktop?: T;
                    desktop?: T;
                    tablet?: T;
                    mobile?: T;
                  };
            };
        blockquote?:
          | T
          | {
              fontSize?: T;
              lineHeight?: T;
            };
        muted?:
          | T
          | {
              fontSize?: T;
              lineHeight?: T;
            };
        table?:
          | T
          | {
              fontSize?: T;
              lineHeight?: T;
            };
        list?:
          | T
          | {
              fontSize?: T;
              lineHeight?: T;
            };
        inlineCode?:
          | T
          | {
              fontSize?: T;
              lineHeight?: T;
            };
        lead?:
          | T
          | {
              fontSize?: T;
              lineHeight?: T;
            };
        large?:
          | T
          | {
              fontSize?: T;
              lineHeight?: T;
            };
        small?:
          | T
          | {
              fontSize?: T;
              lineHeight?: T;
            };
      };
  layout?:
    | T
    | {
        maxWidth?: T;
        breakpoints?:
          | T
          | {
              mobile?: T;
              tablet?: T;
              desktop?: T;
              largeDesktop?: T;
            };
        spacingScale?:
          | T
          | {
              xs?: T;
              sm?: T;
              md?: T;
              lg?: T;
              xl?: T;
            };
        borderRadius?:
          | T
          | {
              box?: T;
              button?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}